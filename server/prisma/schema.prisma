// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id      String    @id @default(uuid()) @db.Uuid
  username  String  @unique
  password  String
  email     String  @unique
  status    UserStatus? @default(active)
  role      UserRole  @default(user)

  collections Collection[]

 // Обратная связь для лайков пользователя
  likes Like[] @relation("user_likes", fields: [id], references: [user_id])

  // Обратная связь для комментариев пользователя
  comments Comment[]  @relation(fields: [id], references: [user_id])

  // Обратная связь для лайков пользователя
  likes Like[] @relation("user_likes", fields: [id], references: [user_id])
}

enum UserStatus {
  active
  blocked
  deleted
}

enum UserRole {
  user
  admin
}

model Category {
  id             String    @id @default(uuid()) @db.Uuid
  category_name  String    @unique
}



model Collection {
  id               String     @id @default(uuid()) @db.Uuid
  name             String
  description      String?
  image_url        String?

  user             User       @relation(fields: [user_id], references: [id])
  user_id          String     @db.Uuid
  items             Item[]  @relation("collection", fields: [id], references: [collection_id])

  custom_string1_state    Boolean?  @default(false)
  custom_string1_name     String?
  custom_string2_state    Boolean?  @default(false)
  custom_string2_name     String?
  custom_string3_state    Boolean?  @default(false)
  custom_string3_name     String?

  custom_int1_state       Boolean?  @default(false)
  custom_int1_name        String?
  custom_int2_state       Boolean?  @default(false)
  custom_int2_name        String?
  custom_int3_state       Boolean?  @default(false)
  custom_int3_name        String?

  custom_text1_state      Boolean?  @default(false)
  custom_text1_name       String?
  custom_text2_state      Boolean?  @default(false)
  custom_text2_name       String?
  custom_text3_state      Boolean?  @default(false)
  custom_text3_name       String?

  custom_boolean1_state   Boolean?  @default(false)
  custom_boolean1_name    String?
  custom_boolean2_state   Boolean?  @default(false)
  custom_boolean2_name    String?
  custom_boolean3_state   Boolean?  @default(false)
  custom_boolean3_name    String?

  custom_date1_state      Boolean?  @default(false)
  custom_date1_name       String?
  custom_date2_state      Boolean?  @default(false)
  custom_date2_name       String?
  custom_date3_state      Boolean?  @default(false)
  custom_date3_name       String?
}

model Tag {
  id      String  @id @default(uuid()) @db.Uuid
  tag_name String  @unique
  items   Item[]  @relation("tags", fields: [id], references: [tags_id])
}



// prisma/schema.prisma

model Item {
  id                   String     @id @default(uuid()) @db.Uuid
  name                 String

  tags             Tag?         @relation("tags", fields: [tags_id], references: [id])
  tags_id          String?      @db.Uuid
  collection       Collection   @relation("collection", fields: [collection_id], references: [id])
  collection_id    String       @db.Uuid

  // Обратная связь для лайков элемента
  itemLikes Like[] @relation("item_likes", fields: [id], references: [item_id])

  custom_string1_value String?
  custom_string2_value String?
  custom_string3_value String?

  custom_int1_value    Int?
  custom_int2_value    Int?
  custom_int3_value    Int?

  custom_text1_value   String?
  custom_text2_value   String?
  custom_text3_value   String?

  custom_boolean1_value Boolean?
  custom_boolean2_value Boolean?
  custom_boolean3_value Boolean?

  custom_date1_value   DateTime?
  custom_date2_value   DateTime?
  custom_date3_value   DateTime?

  // Обратная связь для лайков элемента
  likes Like[] @relation("item_likes", fields: [id], references: [item_id])
}




model Comment {
  id        String    @id @default(uuid()) @db.Uuid
  content   String    @db.Text
  user      User      @relation(fields: [user_id], references: [id])
  user_id   String    @db.Uuid
  item      Item      @relation(fields: [item_id], references: [id])
  item_id   String    @db.Uuid
}




model Like {
  id      String  @id @default(uuid()) @db.Uuid
  user    User    @relation("user_likes", fields: [user_id], references: [id])
  user_id String  @db.Uuid
  item    Item    @relation("item_likes", fields: [item_id], references: [id])
  item_id String  @db.Uuid

  @@unique([user_id, item_id])
}