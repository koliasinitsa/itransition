// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model User {
  id         String       @id @default(uuid())
  username   String       @unique
  password   String
  email      String       @unique
  status     UserStatus   @default(active)
  role       UserRole     @default(user)
  Collection Collection[]
  Comment    Comment[]
  Like       Like[]
}

enum UserStatus {
  active
  blocked
  deleted
}

enum UserRole {
  user
  admin
}

model Category {
  id            String       @id @default(uuid())
  category_name String       @unique
  Collection    Collection[]
}

model Collection {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  description String?  @db.Text
  image_url   String?  @db.VarChar(1000)
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String   @db.Uuid
  category    Category @relation(fields: [category_id], references: [id])
  category_id String   @db.Uuid

  custom_string1_state Boolean @default(false)
  custom_string1_name  String? @db.VarChar(255)
  custom_string2_state Boolean @default(false)
  custom_string2_name  String? @db.VarChar(255)
  custom_string3_state Boolean @default(false)
  custom_string3_name  String? @db.VarChar(255)

  custom_int1_state Boolean @default(false)
  custom_int1_name  String? @db.VarChar(255)
  custom_int2_state Boolean @default(false)
  custom_int2_name  String? @db.VarChar(255)
  custom_int3_state Boolean @default(false)
  custom_int3_name  String? @db.VarChar(255)

  custom_text1_state Boolean @default(false)
  custom_text1_name  String? @db.VarChar(255)
  custom_text2_state Boolean @default(false)
  custom_text2_name  String? @db.VarChar(255)
  custom_text3_state Boolean @default(false)
  custom_text3_name  String? @db.VarChar(255)

  custom_boolean1_state Boolean @default(false)
  custom_boolean1_name  String? @db.VarChar(255)
  custom_boolean2_state Boolean @default(false)
  custom_boolean2_name  String? @db.VarChar(255)
  custom_boolean3_state Boolean @default(false)
  custom_boolean3_name  String? @db.VarChar(255)

  custom_date1_state Boolean @default(false)
  custom_date1_name  String? @db.VarChar(255)
  custom_date2_state Boolean @default(false)
  custom_date2_name  String? @db.VarChar(255)
  custom_date3_state Boolean @default(false)
  custom_date3_name  String? @db.VarChar(255)
  Item               Item[]
}

model Tag {
  id       String @id @default(uuid())
  tag_name String @unique

  items Item[] @relation("tags")
}

model Item {
  id            String     @id @default(uuid())
  name          String     @db.VarChar(255)
  tags          Tag[]      @relation("tags")
  collection    Collection @relation(fields: [collection_id], references: [id])
  collection_id String     @db.Uuid

  custom_string1_value String? @db.VarChar(255)
  custom_string2_value String? @db.VarChar(255)
  custom_string3_value String? @db.VarChar(255)

  custom_int1_value Int?
  custom_int2_value Int?
  custom_int3_value Int?

  custom_text1_value String? @db.Text
  custom_text2_value String? @db.Text
  custom_text3_value String? @db.Text

  custom_boolean1_value Boolean?
  custom_boolean2_value Boolean?
  custom_boolean3_value Boolean?

  custom_date1_value DateTime?
  custom_date2_value DateTime?
  custom_date3_value DateTime?
  Comment            Comment[]
  Like               Like[]
}

model Comment {
  id      String @id @default(uuid())
  content String
  user    User   @relation(fields: [user_id], references: [id])
  user_id String @db.Uuid
  item    Item   @relation(fields: [item_id], references: [id])
  item_id String @db.Uuid
}

model Like {
  id      String @id @default(uuid())
  user    User   @relation(fields: [user_id], references: [id])
  user_id String @db.Uuid
  item    Item   @relation(fields: [item_id], references: [id])
  item_id String @db.Uuid
}
